%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%
%  Residual and Stiffness matrices due to vaccum effect in the principle of
%  virtual work
%
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
function str                 =  BoundaryIntegralsBEMOnlyElectro(str)

%--------------------------------------------------------------------------
% Dimension of the problem 
%--------------------------------------------------------------------------
fprintf('Begining of static assembly for BEM integral\n')
% %--------------------------------------------------------------------------
% % Initialise assembled residuals per element
% %--------------------------------------------------------------------------
% str                          =  ElementResidualInitialisationFormulationBoundaryBEM(str);
%--------------------------------------------------------------------------
% Dofs per element and initialisation of indexi, indexj and data
%--------------------------------------------------------------------------
[Kindexi,Kindexj,Kdata,...
Tindexi,Tindexj,Tdata,...
BIindexi,BIindexj,BIdata]           =  SparseStiffnessPreallocationBoundaryBEM(str.geometry.dim,str.mesh,str.data.formulation);
%--------------------------------------------------------------------------
% Loop over collocation points
%--------------------------------------------------------------------------
tic     
for inode=1:str.mesh.surface.q.n_nodes
    parfor iedge=1:size(str.mesh.surface.x.boundary_edges,2)
        %------------------------------------------------------------------
        % Residuals and stiffness matrices
        %------------------------------------------------------------------
        element_assembly         =  ResidualStiffnessElectroBoundaryBEMOnlyElectro(inode,iedge,str.geometry.dim,...
                                                                    str.mesh,str.fem,str.solution,str.quadrature);
        %------------------------------------------------------------------
        % Sparse assembly 
        %------------------------------------------------------------------
        [INDEXI,INDEXJ,DATA]     =  StiffnessSparseAssemblyBoundaryBEMOnlyElectro(inode,str.geometry.dim,iedge,str.mesh,element_assembly);                                                                      
        Kindexi(:,inode,iedge)   =  INDEXI;
        Kindexj(:,inode,iedge)   =  INDEXJ;
        Kdata(:,inode,iedge)     =  DATA;        
        %------------------------------------------------------------------
        % Assembly of residuals
        %------------------------------------------------------------------
        [INDEXI,INDEXJ,DATA]     =  SparseVectorsAssemblyBoundaryBEMOnlyElectro(inode,str.mesh,element_assembly);
%         Tindexi(:,dofs)          =  INDEXI;
%         Tindexj(:,dofs)          =  INDEXJ;
%         Tdata(:,dofs)            =  DATA;
        BIindexi(:,iedge)        =  INDEXI;
        BIindexj(:,iedge)        =  INDEXJ;
        BIdata(:,iedge)          =  DATA;
    end
    Tindexi(:,inode)             =  BIindexi;
    Tindexj(:,inode)             =  BIindexj;
    Tdata(:,inode)               =  BIdata;
end     
toc 
%--------------------------------------------------------------------------
% Sparse assembly of the residual and the stiffness matrix.        
%--------------------------------------------------------------------------
total_dofs                   =  size(str.assembly.K_total,1);
str.assembly.Tinternal       =  str.assembly.Tinternal + sparse(Tindexi,Tindexj,Tdata,total_dofs,1);
str.assembly.K_total         =  str.assembly.K_total + sparse(Kindexi,Kindexj,Kdata,total_dofs,total_dofs);

fprintf('End of static assembly\n')

end 





